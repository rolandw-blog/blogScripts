@import "../base/mixins";
@import "../base/variables_dark";
@import "./chapters";
@import "./nav";
@import "../base/typography";

$a-tags: "a, a:active, a:hover, a:visited";
$headers: "h1, h2, h3, h4, h5, h6";

* {
	margin: 0;
	padding: 0;
	color: unset;
	font-family: $fonts;
}

body {
	background-color: $bg-color;
	color: $font-color;
}

// ##──── Alignment ─────────────────────────────────────────────────────────────────────────
#app {
	display: grid;
	grid-template-columns: auto minmax(auto, 100vw);
	grid-template-rows: auto;
	min-height: 100vh;
}

nav {
	grid-column: 1;
}

main {
	grid-column: 2;
}

#hero-image {
	width: clamp(300px, 80%, 700px);
}

article {
	overflow-x: hidden;
	padding: 2.5rem;

	// Fix so the article doesn't stick at the bottom of the page
	margin-bottom: 2ch;
	@include desktop {
		// clamp the width of the article on desktop
		width: clamp(300px, 80%, 55em);
	}
}

img {
	max-width: 100%;
}

// space consecutive images
.markdown-image-wrapper + .markdown-image-wrapper {
	margin-top: 1em;
}

// ##──── Typography ────────────────────────────────────────────────────────────────────────
article {
	// H3 gets a little bit of padding
	h3 {
		margin-top: 1.5em;
	}

	// Make sure you leave this, without it lists wont even get a circle/square ::marker
	ul {
		margin-left: 2ch;
	}

	// size the heading elements
	h1,
	h2 {
		font-size: 2.5em;
	}

	h2 {
		margin: 20px 0;
	}

	h3 {
		font-size: 1.5em;
	}

	// color and bad headings
	h1,
	h2,
	h3,
	h4,
	h5,
	h6 {
		color: $font-accent3;

		// Pad the heading text
		margin: 1em 0;
	}

	a {
		color: $font-accent3;
	}

	// BEWARE OF THIS MESS
	// These following styles make all the padding work, it was trial and error and i am NOT going
	// to question how or why it works. Just that for the most part it works.
	p {
		margin: 1em 0;
	}

	.code-wrapper + :not(.code-wrapper) {
		margin-bottom: 1em;
	}

	.output-wrapper + p {
		margin-top: 1em;
	}

	p + .output-wrapper {
		margin-top: 1em;
	}

	p + .code-wrapper,
	.output-wrapper {
		margin-top: 1em;
	}

	.output-wrapper + .output-wrapper {
		margin-top: 1em;
	}

	.code-wrapper + p {
		margin-top: 1em;
	}

	.code-wrapper + .code-wrapper {
		margin-top: 1em;
	}
}

// ##──── Code ────────────────────────────────────────────────────────────────────────────
article {
	// Code wrappers are used to wrap ALL code blocks (none, code, output)
	.code-wrapper {
		display: grid;
		grid-template-columns: 70px 1fr;
		background-color: $code-block-bg;
		color: $font-color;

		// code block labels
		.codeblock-label {
			grid-column: 1;
			background-color: $font-accent1;
			cursor: pointer;
			display: flex;
			justify-content: center;
			align-items: center;
			&:hover {
				background-color: lighten($bg-color, 40%);
			}
			a {
				color: $bg-color;
			}
		}

		.codeblock-output-label {
			cursor: unset;
			&:hover {
				background-color: lighten($bg-color, 40%);
			}
		}
	}

	// The code block itself (not the left button)
	.codeblock-wrapper {
		grid-column: 2;
		padding: 1em;

		// Scroll the code when it overflows
		overflow-x: scroll;
		scrollbar-color: $bg-color $code-block-bg;
		scrollbar-width: thin;

		// chrome
		&::-webkit-scrollbar {
			width: 5px;
			height: 5px;
		}

		&::-webkit-scrollbar-thumb {
			background: lighten($bg-accent, 60%);
		}

		&::-webkit-scrollbar-track {
			background: $code-block-bg;
		}

		pre {
			margin: 0px;
			padding: 0px;
		}
	}

	// Style output code blocks
	.output-wrapper {
		margin: 0px;
		padding: 1em;
		// Scroll the code when it overflows
		overflow-x: scroll;
		scrollbar-color: $bg-color $font-accent2;
		scrollbar-width: thin;
		// output blocks have a different background color to code blocks
		// 		so we need to adjust the scroll bar background color for outputs to match
		// 		the surrounding codeblock
		.language-output {
			// chrome scrollbar bg color
			&::-webkit-scrollbar-track {
				// change the color to $bg-color instead of $code-block-bg for output blocks
				background-color: $bg-accent;
			}
			// firefox scrollbar bg color
			scrollbar-color: $bg-color $bg-accent;
		}
	}

	.codeblock-wrapper,
	.output-wrapper {
		font-family: monospace;
	}

	// "output" language
	.is-output {
		margin: 0px;
		background-color: $font-accent2;
		color: $font-color;
		.codeblock-label {
			display: none;
		}
	}

	// inline code stuff
	code:not([class]) {
		background-color: $font-accent2;
		padding: 0 0.5ch;
		line-height: 150%;
		margin: 0.25ch;
		color: $font-accent1;
		word-break: break-all;
		display: inline-block;
	}
}
