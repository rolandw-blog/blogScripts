@import "base/mixins";
@import "components/chapters";

$a-tags: "a, a:active, a:hover, a:visited";
$headers: "h1, h2, h3, h4, h5, h6";

* {
	margin: 0;
	padding: 0;
	color: unset;
	font-family: var(--fonts);
}

body {
	background-color: var(--bg-color);
	color: var(--bg-accent);
}

// ##──── Alignment ─────────────────────────────────────────────────────────────────────────
#app {
	// display: flex;
	display: grid;
	grid-template-columns: auto 1fr;
	grid-template-rows: auto;
	// flex: 1;
	// padding: 0;
	min-height: 100vh;
}

nav {
	grid-column: 1;
}

main {
	grid-column: 2;
}

#hero-image {
	width: clamp(300px, 80%, 700px);
}

article {
	overflow-x: hidden;
	padding: 2.5rem;

	// Fix so the article doesn't stick at the bottom of the page
	margin-bottom: 2ch;
	@include desktop {
		// clamp the width of the article on desktop
		width: clamp(300px, 80%, 55em);
	}
}

img {
	max-width: 100%;
}

// ##──── Nav ───────────────────────────────────────────────────────────────────────────────
nav {
	// The nav is a desktop only component (for now)
	@include mobile {
		display: none;
	}

	padding: 2.5em;

	background-color: var(--bg-accent);
	color: var(--bg-color);

	// width: clamp(200px, 35ch, 20%);
	width: 15vw;
	min-width: 200px;
	section {
		padding-bottom: 1em;
	}

	@include tablet {
		padding: 1em;
	}
}

.nav-subsection {
	margin: 0.5ch 0;
}

.nav-bottom {
	margin-top: auto;
}

.breadCrumbs {
	word-wrap: break-word;
}

.bread-crumb-nav-slash {
	color: var(--bg-color);
}

// organize the prev and next nav links
.nav-link {
	color: #ffffff;
	display: grid;
	grid-template-columns: auto 1fr;
	span {
		display: inline;
	}
}

// #nav-bottom {
// 	position: absolute;
// 	bottom: 0;
// }

// ##──── Typography ────────────────────────────────────────────────────────────────────────
article {
	font-size: 16.18px;

	// H3 gets a little bit of padding
	h3 {
		margin-top: 1.5em;
	}

	// Set a nicer line height
	span,
	p {
		line-height: 140%;
		// font-size: 120%;
	}

	// separate the paragraphs
	p {
		margin: 20px 0;
	}

	// Make sure you leave this, without it lists wont even get a circle/square ::marker
	ul {
		margin-left: 2ch;
	}

	// size the heading elements
	h1,
	h2 {
		font-size: 2.5em;
	}

	h2 {
		margin: 20px 0;
	}

	h3 {
		font-size: 1.5em;
	}

	// fix to evenly space letters for ascii diagrams
	.language-output {
		font-family: monospace;
	}
}

// ##──── Code ────────────────────────────────────────────────────────────────────────────
article {
	.code-wrapper {
		display: grid;
		grid-template-columns: 70px 1fr;
		background-color: var(--code-block-bg);
		color: var(--bg-color);

		// pad the code block itself (not the left button)
		.codeblock-wrapper {
			grid-column: 2;
			padding: 1ch;
			// Scroll the code when it overflows
			overflow-x: scroll;
			scrollbar-color: var(--bg-color) var(--code-block-bg);
			scrollbar-width: thin;

			// chrome
			&::-webkit-scrollbar {
				width: 5px;
				height: 5px;
			}

			&::-webkit-scrollbar-thumb {
				background: lighten($dark, 60%);
			}

			&::-webkit-scrollbar-track {
				background: $code-block-bg;
			}
		}

		// output blocks have a different background color to code blocks
		// 		so we need to adjust the scroll bar background color for outputs to match
		// 		the surrounding codeblock
		// code block = $code-block-bg
		// output block = $dark
		.language-output {
			// chrome scrollbar bg color
			&::-webkit-scrollbar-track {
				// change the color to $dark instead of $code-block-bg for output blocks
				background-color: var(--bg-accent);
			}
			// firefox scrollbar bg color
			scrollbar-color: var(--bg-color) var(--bg-accent);
		}

		// code block labels
		.codeblock-label {
			grid-column: 1;
			background-color: var(--bg-accent);
			cursor: pointer;
			display: flex;
			justify-content: center;
			align-items: center;
			&:hover {
				background-color: lighten($dark, 40%);
			}
		}

		.codeblock-output-label {
			cursor: unset;
			&:hover {
				background-color: lighten($dark, 40%);
			}
		}
	}

	// A code block followed by anything that isn't its "output" will be padded
	// we also DON'T want to pad code + p because p already has adequate padding itself...
	// and then the margin we apply to the code-wrapper would conflict and the top vs btm spacing would be uneven
	.code-wrapper + :not(.is-output):not(p) {
		margin-top: 2em;
	}

	// "output" language
	.is-output {
		background-color: var(--bg-accent);
		color: var(--bg-color);
		.codeblock-label {
			display: none;
		}
	}

	// inline code stuff
	code:not([class]) {
		background-color: rgba(48, 51, 101, 0.2);
		padding: 0 0.5ch;
		color: var(--bg-accent);
		word-break: break-all;
		display: inline-block;
	}
}

// pad text if its got a code block ABOVE and BELOW it
.code-wrapper + :not(.code-wrapper),
:not(.code-wrapper) + .code-wrapper {
	margin-top: 2ch;
}
